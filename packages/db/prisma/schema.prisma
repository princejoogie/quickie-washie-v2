// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PushNotificationToken {
  token  String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  privilege  Privilege @default(CUSTOMER)
  isVerified Boolean   @default(false)
  email      String    @unique
  password   String
  licenseUrl String
  phone      String    @db.VarChar(13)
  name       String
  photoUrl   String

  appointments           Appointment[]
  bugs                   Bug[]
  documents              Document[]
  messages               Message[]
  notifications          Notification[]
  pushNotificationTokens PushNotificationToken[]
  reviews                Review[]
  vehicles               Vehicle[]
}

model VerificationToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  token     String   @unique
}

model Vehicle {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  plateNumber  String        @db.VarChar()
  model        String        @db.VarChar()
  type         VehicleType
  userId       String?
  appointments Appointment[]

  User User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model AdditionalPrice {
  id          String      @id @default(cuid())
  price       Decimal     @db.Decimal(10, 2)
  vehicleType VehicleType
  serviceId   String?

  Service     Service?      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  Appointment Appointment[]
}

model Service {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  basePrice        Decimal           @db.Decimal(10, 2)
  description      String
  additionalPrices AdditionalPrice[]
  appointments     Appointment[]
}

model Appointment {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  date              DateTime           @default(now())
  status            AppointmentStatus  @default(PENDING)
  userId            String?
  vehicleId         String?
  serviceId         String?
  additionalPriceId String?
  messages          Message[]
  documents         Document[]
  track             AppointmentTrack[]
  reviewId          String?            @unique

  Review          Review?          @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  Vehicle         Vehicle?         @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  User            User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  Service         Service?         @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  AdditionalPrice AdditionalPrice? @relation(fields: [additionalPriceId], references: [id], onDelete: SetNull)
}

model AppointmentTrack {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  text          String
  appointmentId String

  Appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model Message {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  seen          Boolean  @default(false)
  content       String   @db.Text
  userId        String?
  appointmentId String?

  Appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  User        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seen      Boolean  @default(false)
  title     String   @db.VarChar(255)
  content   String
  userId    String?

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  downloadUrl   String
  name          String
  mimeType      String   @db.VarChar(128)
  appointmentId String?
  userId        String?

  Appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  User        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.Text
  rating    Int
  userId    String?

  User        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  Appointment Appointment?
}

model Bug {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  title          String
  seen           Boolean  @default(false)
  body           String
  reporterId     String
  screenshotUrls String[]

  Reporter User @relation(fields: [reporterId], references: [id])
}

enum AppointmentStatus {
  PENDING
  ONGOING
  FINISHED
  CANCELLED
}

enum Privilege {
  ADMIN
  CUSTOMER
}

enum VehicleType {
  CONVERTIBLE
  HATCHBACK
  MINIVAN
  PICKUP_TRUCK
  SEDAN_2_DOOR
  SEDAN_4_DOOR
  SPORTS_CAR
  STATION_WAGON
  SUV
}
